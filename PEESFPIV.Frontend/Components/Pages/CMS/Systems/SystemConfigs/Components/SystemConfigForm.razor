@using PEESFPIV.Frontend.Databases.Repositories.Interfaces
@using PEESFPIV.Frontend.Models;
@using PEESFPIV.Frontend.Utils.Interfaces
@using System.ComponentModel.DataAnnotations

@inject ISystemConfigRepository _systemConfigRepository;
@inject ToastService _toastService;

<EditForm Model="Model" method="Post" OnValidSubmit="CreateOrUpdateAsync" FormName="@configForm" class="row gy-2">
    <DataAnnotationsValidator />
    <div class="col-12">
        <label class="form-label">Mã cấu hình <span class="text-danger">*</span></label>
        <InputText @bind-Value="Model.Code" class="form-control" disabled="@(Config is not null)"
            readonly="@(Config is not null)" />
        <ValidationMessage For="()=>Model.Code" class="text-danger" />
    </div>
    <div class="col-12">
        <label class="form-label">Tên cấu hình</label>
        <InputText @bind-Value="Model.Name" class="form-control" />
    </div>
    <div class="col-12">
        <label class="form-label">Nhóm cấu hình</label>
        <InputText @bind-Value="Model.GroupCode" class="form-control" />
    </div>
    <div class="col mt-2 align-self-end">
        <Button Color="ButtonColor.Secondary" @onclick="async ()=>{await ParentModal.HideAsync();}">Đóng</Button>
        <Button Color="ButtonColor.Primary" Type="ButtonType.Submit">Lưu</Button>
    </div>
</EditForm>

@code {
    private string ErrorMessage = "";

    private string avatarPreview = "/images/blank-avatar.png";
    private InputFile avatarPickerInput;
    private const string configForm = "system-config-form";
    [SupplyParameterFromForm(FormName = configForm)]
    private CreateConfigModel Model { get; set; } = new();

    [Parameter]
    public Modal ParentModal { get; set; } = default!;
    [Parameter]
    public SystemConfig? Config { get; set; }

    private async Task CreateOrUpdateAsync()
    {
        ErrorMessage = "";
        if (Config is not null)
        {

            Config.Name = Model.Name;
            Config.Code = Model.Code;
            Config.GroupCode = Model.GroupCode;
            await _systemConfigRepository.Update(Config);
            await ParentModal.HideAsync();
            _toastService.Notify(new(ToastType.Success, $"Cập nhật cấu hình [{Config.Name}] thành công."));

        }
        else
        {
            var configExisted = await _systemConfigRepository.GetByCode(Model.Code);
            if (configExisted is not null)
            {
                ErrorMessage = "Cấu hình đã tồn tại";
                _toastService.Notify(new(ToastType.Danger, $"Lỗi: {ErrorMessage}."));
                return;
            }
           
            var conf = new SystemConfig
                {
                    Id = Guid.NewGuid(),
                    Code = Model.Code,
                    Name = Model.Name,
                    GroupCode = Model.GroupCode,
                };
            await _systemConfigRepository.Add(conf);
            await ParentModal.HideAsync();
            _toastService.Notify(new(ToastType.Success, $"Tạo cấu hình [{conf.Name}] thành công."));
        }

    }


    protected override async Task OnInitializedAsync()
    {
        await Task.CompletedTask;

        if (Config is not null)
        {

            Model = new CreateConfigModel { Name = Config.Name, Code = Config.Code, GroupCode = Config.GroupCode};
        }
        else
        {
            Model = new();
        }
    }


    class CreateConfigModel
    {
        [Required(ErrorMessage = "mã cấu hình đang để trống")]
        public string Code { get; set; } = null!;
        [Required(ErrorMessage = "tên cấu hình đang để trống")]
        public string Name { get; set; } = null!;
        public string? GroupCode { get; set; }


    }
}