@page "/CMS/Roles"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization
@using PEESFPIV.Frontend.Components.Layout;
@using PEESFPIV.Frontend.Components.Pages.CMS.Systems.Roles.Components
@using PEESFPIV.Frontend.Databases.Repositories.Interfaces
@using PEESFPIV.Frontend.Models.Auth;
@using System.Security.Claims
@using PEESFPIV.Frontend.States
@using System.Data
@inject IRoleRepository _roleRepository;

@layout CMSLayout



<PageTitle>Quản lý nhóm người dùng</PageTitle>

<div class="">
    <p class="fs-1 fw-semibold">Quản lý nhóm người dùng</p>
    <div class="mb-3">
        <Button Color="ButtonColor.Success" @onclick="OnShowModalClick" class="me-2">
            <Icon Name="IconName.PlusLg" /> Thêm nhóm
        </Button>
        @if(selectedRoles.Count == 1){
            <Button Color="ButtonColor.Primary" @onclick="OnShowModalClick" class="me-2">
                <Icon Name="IconName.Pencil" class=""/> Cập nhật thông tin
            </Button>
        }
        @if(selectedRoles.Count >0){
            <Button Color="ButtonColor.Danger" @onclick="OnShowModalClick" class="">
                <Icon Name="IconName.Trash"/> Xoá
            </Button>
        }
    </div>
    <Grid
        @ref="grid"
        TItem="Role" 
        Class="table table-hover table-bordered table-striped rounded" 
        DataProvider="UsersDataProvider"
        FiltersTranslationProvider="GridFiltersTranslationProvider" 
        AllowFiltering="true" 
        AllowPaging="true"
        PageSizeSelectorVisible="true"
        PageSizeSelectorItems="@(new int[] { 5,10,20 })"
        PaginationItemsTextFormat="{0} - {1} trong tổng {2} bản ghi"
        ItemsPerPageText="bản ghi trên trang"
        AllowSorting="true" 
        AllowSelection="true"
        SelectionMode="GridSelectionMode.Multiple"
        SelectedItemsChanged="OnSelectedItemsChanged"
        OnRowClick="OnRowClick"
        AllowRowClick="true"
        EmptyText="Không có bản ghi nào" 
        Responsive="true">
        <GridColumn TItem="Role" HeaderText="Tên nhóm" PropertyName="Name" SortString="Name"
            SortKeySelector="item => item.Name">
            @context.Name
        </GridColumn>
        <GridColumn TItem="Role" HeaderText="Mô tả" PropertyName="Description" SortString="NaDescriptionme"
            SortKeySelector="item => item.Description" >
            @context.Name
        </GridColumn>
        <GridColumn TItem="Role" HeaderText="Cập nhật lần cuối" PropertyName="UpdatedAt" SortString="UpdatedAt"
            SortKeySelector="item => item.UpdatedAt" >
            @(context.UpdatedAt.ToString("dd/MM/yyyy HH:mm"))
        </GridColumn>
    </Grid>
</div>

<Modal @ref="modal" title="Tạo nhóm" IsVerticallyCentered="true" OnHidden="OnCreateModalHide">
    <BodyTemplate>
        <RoleForm ParentModal="modal" />
    </BodyTemplate>
</Modal>

@code {
    Grid<Role> grid = default!;
    private Modal modal = default!;
    private HashSet<Role> selectedRoles = new();

    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }
    private async Task OnCreateModalHide (){
        await grid.RefreshDataAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }
    private Task OnSelectedItemsChanged(HashSet<Role> roles)
    {
        selectedRoles = roles is not null && roles.Any() ? roles : new();
        return Task.CompletedTask;
    }
    private async Task OnRowClick(GridRowEventArgs<Role> args)
    {
        selectedRoles.Add(args.Item);
        await Task.CompletedTask;

    }
    private async Task<IEnumerable<FilterOperatorInfo>> GridFiltersTranslationProvider()
    {
        var filtersTranslation = new List<FilterOperatorInfo>();

        // number/date/boolean
        filtersTranslation.Add(new("=", "Bằng", FilterOperator.Equals));
        filtersTranslation.Add(new("!=", "Khác", FilterOperator.NotEquals));
        // number/date
        filtersTranslation.Add(new("<", "Nhỏ hơn", FilterOperator.LessThan));
        filtersTranslation.Add(new("<=", "Nhỏ hơn hoặc bằng", FilterOperator.LessThanOrEquals));
        filtersTranslation.Add(new(">", "Lớn hơn", FilterOperator.GreaterThan));
        filtersTranslation.Add(new(">=", "Lớn hơn hoặc bằng", FilterOperator.GreaterThanOrEquals));
        // string
        filtersTranslation.Add(new("*a*", "Chứa từ", FilterOperator.Contains));
        filtersTranslation.Add(new("!*a*", "Không chứa từ", FilterOperator.DoesNotContain));
        filtersTranslation.Add(new("a**", "Bắt đầu bằng", FilterOperator.StartsWith));
        filtersTranslation.Add(new("**a", "Kết thúc bằng", FilterOperator.EndsWith));
        filtersTranslation.Add(new("=", "Bằng", FilterOperator.Equals));
        // common
        filtersTranslation.Add(new("x", "Xoá lọc", FilterOperator.Clear)); 

        return await Task.FromResult(filtersTranslation);
    }
    private async Task<GridDataProviderResult<Role>> UsersDataProvider(GridDataProviderRequest<Role> request)
    {
        string sortString = "";
        SortDirection sortDirection = SortDirection.None;

        if (request.Sorting is not null && request.Sorting.Any())
        {
            // Note: Multi column sorting is not supported at this moment
            sortString = request.Sorting.FirstOrDefault()!.SortString;
            sortDirection = request.Sorting.FirstOrDefault()!.SortDirection;
        }
        var result = await _roleRepository.GetPagedList(request.PageNumber, request.PageSize, sortString,
        sortDirection.ToString());
        return await Task.FromResult(new GridDataProviderResult<Role> { Data = result.Values, TotalCount = result.Total });
    }

}
