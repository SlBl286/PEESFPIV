@using PEESFPIV.Frontend.Databases.Repositories.Interfaces
@using PEESFPIV.Frontend.Models
@using System.ComponentModel.DataAnnotations

@inject IJSRuntime js;
@inject IWebHostEnvironment _env;
@inject ITrainingCourseRepository _trainingCourseRepository;
@inject ToastService _toastService;

<EditForm Model="Model" method="Post" OnValidSubmit="CreateOrUpdateAsync" FormName="@ResearchStudiesForm"
    class="row gy-2">
    <DataAnnotationsValidator />
    <div class="col-12 text-center">
        <label class="form-label col-12">Ảnh Banner</label>
        <Image src="@avatarPreview" @onclick="OnImageClick" class="object-fit-contain rounded boder avatar-picker"
            IsThumbnail="true" style="width:300px;height:150px;" alt="avatar" />
        <InputFile OnChange="UploadFile" @ref="avatarPickerInput" class="form-control"
            accept=".jpg,.png,.jpeg,.svg,.webp" hidden />
    </div>
    <div class="col-6">
        <label class="form-label">Tiêu đề (Tiếng việt) <span class="text-danger">*</span></label>
        <InputText @bind-Value="Model.VnTitle" class="form-control" disabled="@(TrainingCourse is not null)"
            readonly="@(TrainingCourse is not null)" />
        <ValidationMessage For="()=>Model.VnTitle" class="text-danger" />
    </div>
    <div class="col-6">
        <label class="form-label">Tiêu đề (English)</label>
        <InputText @bind-Value="Model.EnTitle" class="form-control" />
        <ValidationMessage For="()=>Model.EnTitle" class="text-danger" />

    </div>
    <div class="col-6">
        <label class="form-label">Nội dung (Tiếng việt)</label>
        <InputTextArea @bind-Value="Model.VnAddress" class="form-control" />
        <ValidationMessage For="()=>Model.VnAddress" class="text-danger" />

    </div>
    <div class="col-6">
        <label class="form-label">Nội dung (English)</label>
        <InputTextArea @bind-Value="Model.EnAddress" class="form-control" />
        <ValidationMessage For="()=>Model.EnAddress" class="text-danger" />

    </div>
      <div class="col-12">
        <label class="form-label">Thứ tự</label>
        <InputNumber @bind-Value="Model.NumOfParticipation" class="form-control" />
        <ValidationMessage For="()=>Model.NumOfParticipation" class="text-danger" />

    </div>
    <div class="col-12">
        <label class="form-label">Link</label>
        <InputText @bind-Value="Model.Link" class="form-control" />
        <ValidationMessage For="()=>Model.Link" class="text-danger" />

    </div>
    <div class="col-12">
        <label class="form-label">Thứ tự</label>
        <InputNumber @bind-Value="Model.Order" class="form-control" />
        <ValidationMessage For="()=>Model.Order" class="text-danger" />

    </div>
    <div class="col mt-2 align-self-end">
        <Button Color="ButtonColor.Secondary" @onclick="async ()=>{await ParentModal.HideAsync();}">Đóng</Button>
        <Button Color="ButtonColor.Primary" Type="ButtonType.Submit">Lưu</Button>
    </div>
</EditForm>


@code {
    private string ErrorMessage = "";
    private string avatarPreview = "/images/blank-image.jpg";
    private InputFile avatarPickerInput { get; set; } = null!;
    private const string ResearchStudiesForm = "research-study-form";
    [SupplyParameterFromForm(FormName = ResearchStudiesForm)]
    private CreateTrainingCourseModel Model { get; set; } = new();
    [Parameter]
    public Modal ParentModal { get; set; } = default!;
    [Parameter]
    public TrainingCourse? TrainingCourse { get; set; }
    private async Task CreateOrUpdateAsync()
    {
        ErrorMessage = "";
        if (TrainingCourse is not null)
        {

            TrainingCourse.VnTitle = Model.VnTitle;
            TrainingCourse.EnTitle = Model.EnTitle;
            TrainingCourse.VnAddress = Model.VnAddress;
            TrainingCourse.EnAddress = Model.EnAddress;
            TrainingCourse.Order = Model.Order;
            TrainingCourse.NumOfParticipation = Model.NumOfParticipation;
            var oldImagePath = TrainingCourse.Image;
            if (Model.Image is not null)
            {
                var saveFolder = Path.Combine(_env.ContentRootPath, "wwwroot", "uploads", "trainingcourse");
                var fileName =
                Path.GetFileNameWithoutExtension(Model.Image.Name) + "_" + Path.GetRandomFileName() + Path.GetExtension(Model.Image.Name);
                var filePath = Path.Combine(saveFolder, fileName);
                Directory.CreateDirectory(saveFolder);
                await using FileStream fs = new(filePath, FileMode.Create);
                await Model.Image.OpenReadStream(maxAllowedSize: 1024 * 5000).CopyToAsync(fs);
                TrainingCourse.Image = Path.Combine("uploads", "trainingcourse", fileName);
            }

            await _trainingCourseRepository.Update(TrainingCourse);
            if (oldImagePath is not null)
            {
                var saveFolder = Path.Combine(_env.ContentRootPath, "wwwroot");
                var filePath = Path.Combine(saveFolder, oldImagePath);
                if (File.Exists(filePath))
                {
                    File.Delete(filePath);
                }
            }
            await ParentModal.HideAsync();
            _toastService.Notify(new(ToastType.Success, $"Cập nhật TrainingCourse [{TrainingCourse.VnTitle}] thành công."));

        }
        else
        {
            string? imagePath = null;
            if (Model.Image is not null)
            {
                var saveFolder = Path.Combine(_env.ContentRootPath, "wwwroot", "uploads", "trainingcourse");
                var fileName =
                Path.GetFileNameWithoutExtension(Model.Image.Name) + "_" + Path.GetRandomFileName() + Path.GetExtension(Model.Image.Name);
                var filePath = Path.Combine(saveFolder, fileName);
                Directory.CreateDirectory(saveFolder);
                await using FileStream fs = new(filePath, FileMode.Create);
                await Model.Image.OpenReadStream(maxAllowedSize: 1024 * 5000).CopyToAsync(fs);
                imagePath = Path.Combine("uploads", "trainingcourse", fileName);
            }
            var trainingCourse = new TrainingCourse
                {
                    Id = Guid.NewGuid(),
                    VnTitle = Model.VnTitle,
                    EnTitle = Model.EnTitle,
                    VnAddress = Model.VnAddress,
                    EnAddress = Model.EnAddress,
                    Link = Model.Link,
                    Order = Model.Order,
                    NumOfParticipation = Model.NumOfParticipation,
                    Image = imagePath
                };
            await _trainingCourseRepository.Add(trainingCourse);
            await ParentModal.HideAsync();
            _toastService.Notify(new(ToastType.Success, $"Tạo mới TrainingCourse [{trainingCourse.VnTitle}] thành công."));
        }
    }


    private async Task OnImageClick()
    {
        await js.InvokeAsync<object>("HTMLElement.prototype.click.call", avatarPickerInput.Element);

    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        Model.Image = e.File;

        var resizedFile = await e.File.RequestImageFileAsync(e.File.ContentType, 300, 150);
        var buf = new byte[resizedFile.Size];

        using (var stream = resizedFile.OpenReadStream())
        {
            await stream.ReadAsync(buf);
        }

        avatarPreview = "data:image/png;base64," + Convert.ToBase64String(buf);
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.CompletedTask;

        if (TrainingCourse is not null)
        {

            Model = new CreateTrainingCourseModel

                {
                    VnTitle = TrainingCourse.VnTitle,
                    EnAddress = TrainingCourse.EnAddress,
                    VnAddress = TrainingCourse.VnAddress,
                    EnTitle = TrainingCourse.VnTitle,
                    Order = TrainingCourse.Order,
                    NumOfParticipation = TrainingCourse.NumOfParticipation,
                    Link = TrainingCourse.Link
                };
            avatarPreview = TrainingCourse.Image is not null ? "\\" + TrainingCourse.Image : "/images/blank-image.jpg";

        }
        else
        {
            Model = new();
        }
    }



    class CreateTrainingCourseModel
    {
        [Required(ErrorMessage = "Tên tiếng việt đang để trống")]
        public string VnTitle { get; set; } = null!;
        [Required(ErrorMessage = "Tên tiếng anh đang để trống")]
        public string EnTitle { get; set; } = null!;
        [Required(ErrorMessage = "Nội dung tiếng việt đang để trống")]
        public string VnAddress { get; set; } = null!;
        [Required(ErrorMessage = "Nội dung tiếng anh đang để trống")]
        public string EnAddress { get; set; } = null!;
        public DateTime EventDate { get; set; }
        public string? Link { get; set; }
        public int NumOfParticipation { get; set; }
        [Required(ErrorMessage = "thứ tự đang để trống")]
        public int Order { get; set; }
        public IBrowserFile? Image { get; set; }

    }
}