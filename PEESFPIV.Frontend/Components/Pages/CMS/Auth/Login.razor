@page "/cms/auth/login"
@using PEESFPIV.Frontend.Components.Layout;
@using PEESFPIV.Frontend.Constants
@using PEESFPIV.Frontend.Databases.Repositories.Interfaces
@using PEESFPIV.Frontend.Models;
@using System.ComponentModel.DataAnnotations
@using PEESFPIV.Frontend.Models.Auth
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using PEESFPIV.Frontend.Utils.Interfaces

@inject NavigationManager NavigationManager;
@inject IUserRepository UserRepository;
@inject IHashString hashString;

@layout AuthLayout

<PageTitle>Login</PageTitle>
<div class="h-100 row justify-content-center align-items-center">
    <Card Class="pb-4 " style="width: 26rem;">
        <CardBody>
            <EditForm Model="Model" method="Post" OnValidSubmit="LoginUserAsync" FormName="@LoginForm" class="row gy-2">
                <DataAnnotationsValidator/>
                <div class="col-12">
                    <label class="form-label">Tài khoản</label>
                    <InputText @bind-Value="Model.Username" class="form-control" />
                    <ValidationMessage For="()=>Model.Username" class="text-danger" />
                </div>
                <div class="col-12">
                    <label class="form-label">Mật khẩu</label>
                    <InputText type="password" @bind-Value="Model.Password" class="form-control" />
                    <ValidationMessage For="()=>Model.Password" class=" text-danger" />
                </div>
                <div class="col-12">
                    <InputCheckbox @bind-Value="Model.RememberMe" class="form-check-input" />
                    <span>


                    </span>
                    <label class="form-check-label">
                        Ghi nhớ đăng nhập
                    </label>
                </div>
                <p class="text-danger col-12">@ErrorMessage</p>
                <div class="col-12">
                    <Button Color="ButtonColor.Primary" Type="ButtonType.Submit" class="w-100">Login</Button>
                    @* <button type="submit"
            class="w-full bg-green-500 hover:bg-green-600 rounded text-xl py-2 text-white">Login</button> *@
                </div>
            </EditForm>
        </CardBody>
    </Card>
</div>
@code {
    private string ErrorMessage = "";
    private const string LoginForm = "login-form";

    [SupplyParameterFromForm(FormName = LoginForm)]
    private LoginModel Model { get; set; } = new();

    [CascadingParameter]
    public HttpContext HttpContext { get; set; } = default!;
    [SupplyParameterFromQuery]
    public string ReturnUrl { get; set; } = "/cms";

    private async Task LoginUserAsync()
    {
        ErrorMessage = "";
        var user = await UserRepository.GetUserByUsername(Model.Username);
        if (user is null)
        {
            ErrorMessage = "Tài khoản không tồn tại";
            return;
        }
        if (!hashString.VerifyPassword(Model.Password, user.HashedPassword, Convert.FromBase64String(user.Salt)))
        {
            ErrorMessage = "Tài khoản và mật khẩu không khớp";
            return;
        }
        var claims = user?.ToClaims();
        var identity = new ClaimsIdentity(claims, Cookies.AuthScheme);
        var principal = new ClaimsPrincipal(identity);
        var authProps = new AuthenticationProperties
            {
                IsPersistent = Model.RememberMe
            };
        await HttpContext.SignInAsync(Cookies.AuthScheme, principal, authProps);
        ReturnUrl ??= "/cms";
        NavigationManager.NavigateTo(ReturnUrl);
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.CompletedTask;

        if (HttpContext is not null)
            if (HttpContext.User.Identity?.IsAuthenticated ?? false)
            {
                NavigationManager.NavigateTo(ReturnUrl ?? "/cms");
            }
    }

    class LoginModel
    {
        [Required(ErrorMessage="Tài khoản đang để trống")]
        public string Username { get; set; } = null!;

        [Required(ErrorMessage="Mật khẩu đang để trống")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
        [Display(Name = "Ghi nhớ đăng nhập")]
        public bool RememberMe { get; set; } = true;


    }
}