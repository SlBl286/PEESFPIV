@page "/cms/partner"
@using PEESFPIV.Frontend.Components.Layout;
@using PEESFPIV.Frontend.Components.Pages.CMS.Outcome.Components;
@using PEESFPIV.Frontend.Databases.Repositories.Interfaces
@using PEESFPIV.Frontend.Models;

@inject IOutcomeRepository _outcomeRepository;

@layout CMSLayout
<PageTitle>Quản lý Partner</PageTitle>

<div>
    <p class="fs-1 fw-semibold">Quản lý Partner</p>
    <div class="mb-3">
        <Button Color="ButtonColor.Success" @onclick="OnShowModalCreateClick" class="me-2">
            <Icon Name="IconName.PlusLg" /> Thêm Partner
        </Button>
    </div>
    <Grid @ref="grid" TItem="Outcome" Class="table table-hover table-bordered table-striped rounded"
        DataProvider="KeyFocusDataProvider" FiltersTranslationProvider="GridFiltersTranslationProvider"
        AllowFiltering="true" AllowPaging="true" PageSizeSelectorVisible="true"
        PageSizeSelectorItems="@(new int[] { 5,10,20 })" PaginationItemsTextFormat="{0} - {1} trong tổng {2} bản ghi"
        ItemsPerPageText="bản ghi trên trang" AllowSorting="true" AllowSelection="true"
        SelectionMode="GridSelectionMode.Multiple" SelectedItemsChanged="OnSelectedItemsChanged"
        OnRowDoubleClick="OnRowDbClick" AllowRowClick="true" EmptyText="Không có bản ghi nào" Responsive="true">
             <GridColumn TItem="Outcome" HeaderText="STT" PropertyName="Order"
              TextAlignment="Alignment.Center" HeaderTextAlignment="Alignment.Center" Filterable="false" Sortable="false">
            @context.Order
        </GridColumn>
        <GridColumn TItem="Outcome" HeaderText="Tên (Tiếng việt)" PropertyName="VnTitle" SortString="VnTitle"
            SortKeySelector="item => item.VnTitle" TextAlignment="Alignment.Start">
            @context.VnTitle
        </GridColumn>
        <GridColumn TItem="Outcome" HeaderText="Tên (English)" PropertyName="EnTitle" SortString="EnTitle"
            SortKeySelector="item => item.EnTitle" TextAlignment="Alignment.Start">
            @context.EnTitle
        </GridColumn>
        <GridColumn TItem="Outcome" HeaderText="Nội dung (Tiếng việt)" PropertyName="VnDescription"
            SortString="VnDescription" SortKeySelector="item => item.VnDescription">
            @context.VnDescription
        </GridColumn>
        <GridColumn TItem="Outcome" HeaderText="Nội dung (English)" PropertyName="EnDescription"
            SortString="EnDescription" SortKeySelector="item => item.EnDescription">
            @context.EnDescription
        </GridColumn>
           <GridColumn TItem="Outcome" HeaderText="Ảnh" PropertyName="Image"
             TextAlignment="Alignment.Center" HeaderTextAlignment="Alignment.Center" Filterable="false" Sortable="false">
             <Image Src="@GetAvatar(context.Image)"  IsThumbnail="true" style="width:100px;height:50px;" class="object-fit-fill rounded boder"  Alt="Image"/> 
        </GridColumn>
        <GridColumn TItem="Outcome" HeaderText="Cập nhật lần cuối" PropertyName="UpdatedAt" SortString="UpdatedAt"
            SortKeySelector="item => item.UpdatedAt">
            @(context.UpdatedAt.ToString("dd/MM/yyyy HH:mm"))
        </GridColumn>
    </Grid>
</div>
<ConfirmDialog @ref="dialog" />
<Modal @ref="modal"title="@addNUpdateModalTitle" IsVerticallyCentered="true" OnHidden="OnCreateModalHide" Size="ModalSize.Large">
    <BodyTemplate>
        <OutcomeForm ParentModal="modal" Outcome="updateOutcome" />
    </BodyTemplate>
</Modal>

@code {
    private string addNUpdateModalTitle = "Tạo mới Outcome";
    private ConfirmDialog dialog = default!;
    Grid<Outcome> grid = default!;
    private Modal modal = default!;
    private HashSet<Outcome> selectedKeyOutcomes = new();
    private Outcome? updateOutcome { get; set; } = null;
    private async Task OnShowModalCreateClick()
    {
        addNUpdateModalTitle = "Tạo mới Partner";
        updateOutcome = null;
        await modal.ShowAsync();
    }
    private string GetAvatar(string? avatarPath)
    {
        if (avatarPath is null) return "/images/blank-image.jpg";
        else return "\\" + avatarPath;
    }
    private async Task OnShowModalUpdateClick()
    {
        addNUpdateModalTitle = "Cập nhật thông tin Partner";
        updateOutcome = selectedKeyOutcomes.FirstOrDefault();
        await modal.ShowAsync();
    }
    private async Task OnCreateModalHide()
    {
        await grid.RefreshDataAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }

    private Task OnSelectedItemsChanged(HashSet<Outcome> outcomes)
    {
        selectedKeyOutcomes = outcomes is not null && outcomes.Any() ? outcomes : new();

        return Task.CompletedTask;
    }
    private async Task OnRowDbClick(GridRowEventArgs<Outcome> args)
    {
        addNUpdateModalTitle = "Cập nhật thông tin Outcome";
        updateOutcome = args.Item;
        await modal.ShowAsync();

    }
    private async Task<IEnumerable<FilterOperatorInfo>> GridFiltersTranslationProvider()
    {
        var filtersTranslation = new List<FilterOperatorInfo>();

        // number/date/boolean
        filtersTranslation.Add(new("=", "Bằng", FilterOperator.Equals));
        filtersTranslation.Add(new("!=", "Khác", FilterOperator.NotEquals));
        // number/date
        filtersTranslation.Add(new("<", "Nhỏ hơn", FilterOperator.LessThan));
        filtersTranslation.Add(new("<=", "Nhỏ hơn hoặc bằng", FilterOperator.LessThanOrEquals));
        filtersTranslation.Add(new(">", "Lớn hơn", FilterOperator.GreaterThan));
        filtersTranslation.Add(new(">=", "Lớn hơn hoặc bằng", FilterOperator.GreaterThanOrEquals));
        // string
        filtersTranslation.Add(new("*a*", "Chứa từ", FilterOperator.Contains));
        filtersTranslation.Add(new("!*a*", "Không chứa từ", FilterOperator.DoesNotContain));
        filtersTranslation.Add(new("a**", "Bắt đầu bằng", FilterOperator.StartsWith));
        filtersTranslation.Add(new("**a", "Kết thúc bằng", FilterOperator.EndsWith));
        filtersTranslation.Add(new("=", "Bằng", FilterOperator.Equals));
        // common
        filtersTranslation.Add(new("x", "Xoá lọc", FilterOperator.Clear));

        return await Task.FromResult(filtersTranslation);
    }
    private async Task<GridDataProviderResult<Outcome>> KeyFocusDataProvider(GridDataProviderRequest<Outcome> request)
    {
        string sortString = "";
        SortDirection sortDirection = SortDirection.None;

        if (request.Sorting is not null && request.Sorting.Any())
        {
            // Note: Multi column sorting is not supported at this moment
            sortString = request.Sorting.FirstOrDefault()!.SortString;
            sortDirection = request.Sorting.FirstOrDefault()!.SortDirection;
        }
        var result = await _outcomeRepository.GetPagedList(request.PageNumber, request.PageSize, sortString,
        sortDirection.ToString());
        return await Task.FromResult(new GridDataProviderResult<Outcome> { Data = result.Values, TotalCount = result.Total });
    }
}
