@using PEESFPIV.Frontend.Databases.Repositories.Interfaces
@using PEESFPIV.Frontend.Models
@using System.ComponentModel.DataAnnotations

@inject IJSRuntime js;
@inject IWebHostEnvironment _env;
@inject IPartnerRepository _partnerRepository;
@inject ToastService _toastService;

<EditForm Model="Model" method="Post" OnValidSubmit="CreateOrUpdateAsync" FormName="@partnerForm" class="row gy-2">
    <DataAnnotationsValidator />
    <div class="col-12 text-center">
        <label class="form-label col-12">Logo</label>
            <Image src="@avatarPreview" @onclick="OnImageClick" class="object-fit-contain rounded boder avatar-picker" IsThumbnail="true"  style="width:300px;height:150px;" alt="avatar" />
        <InputFile OnChange="UploadFile" @ref="avatarPickerInput" class="form-control" accept=".jpg,.png,.jpeg,.svg,.webp" hidden />
    </div>
    <div class="col-6">
        <label class="form-label">Tên (Tiếng việt) <span class="text-danger">*</span></label>
        <InputText @bind-Value="Model.VnName" class="form-control" disabled="@(Partner is not null)"
            readonly="@(Partner is not null)" />
        <ValidationMessage For="()=>Model.VnName" class="text-danger" />
    </div>
    <div class="col-6">
        <label class="form-label">Tên (English) <span class="text-danger">*</span></label>
        <InputText @bind-Value="Model.EnName" class="form-control" />
        <ValidationMessage For="()=>Model.EnName" class="text-danger" />

    </div>
    <div class="col-12">
        <label class="form-label">Thứ tự</label>
        <InputNumber @bind-Value="Model.Order" class="form-control" />
        <ValidationMessage For="()=>Model.Order" class="text-danger" />

    </div>
    <div class="col mt-2 align-self-end">
        <Button Color="ButtonColor.Secondary" @onclick="async ()=>{await ParentModal.HideAsync();}">Đóng</Button>
        <Button Color="ButtonColor.Primary" Type="ButtonType.Submit">Lưu</Button>
    </div>
</EditForm>


@code {
    private string ErrorMessage = "";
    private string avatarPreview = "/images/blank-image.jpg";
    private InputFile avatarPickerInput {get;set;} = null!;
    private const string partnerForm = "partnner-form";
    [SupplyParameterFromForm(FormName = partnerForm)]
    private CreatePartnerModel Model { get; set; } = new();
    [Parameter]
    public Modal ParentModal { get; set; } = default!;
    [Parameter]
    public Partner? Partner { get; set; }
    private async Task CreateOrUpdateAsync()
    {
        ErrorMessage = "";
        if (Partner is not null)
        {

            Partner.VnName = Model.VnName;
            Partner.EnName = Model.EnName;
            Partner.Order = Model.Order;
            var oldImagePath = Partner.Image;
            if(Model.Image is not null){
                var saveFolder = Path.Combine(_env.ContentRootPath,"wwwroot","uploads","partners");
                var fileName = Path.GetFileNameWithoutExtension(Model.Image.Name)+"_"+Path.GetRandomFileName()+Path.GetExtension(Model.Image.Name);
                var filePath = Path.Combine(saveFolder,fileName);
                Directory.CreateDirectory(saveFolder);
                await using FileStream fs = new(filePath, FileMode.Create);
                await  Model.Image.OpenReadStream(maxAllowedSize: 1024 * 5000).CopyToAsync(fs); 
                Partner.Image = Path.Combine("uploads","partners",fileName);
            }

            await _partnerRepository.Update(Partner);
            if(oldImagePath is not null){
                var saveFolder = Path.Combine(_env.ContentRootPath,"wwwroot");
                var filePath = Path.Combine(saveFolder, oldImagePath);
                if(File.Exists(filePath)){
                    File.Delete(filePath);
                }
            }
            await ParentModal.HideAsync();
            _toastService.Notify(new(ToastType.Success, $"Cập nhật Partner [{Partner.VnName}] thành công."));

        }
        else
        {
            string? imagePath =null;
            if(Model.Image is not null){
                var saveFolder = Path.Combine(_env.ContentRootPath,"wwwroot","uploads","partners");
                var fileName = Path.GetFileNameWithoutExtension(Model.Image.Name)+"_"+Path.GetRandomFileName()+Path.GetExtension(Model.Image.Name);
                var filePath = Path.Combine(saveFolder, fileName);
                Directory.CreateDirectory(saveFolder);
                await using FileStream fs = new(filePath, FileMode.Create);
                await  Model.Image.OpenReadStream(maxAllowedSize: 1024 * 5000).CopyToAsync(fs); 
                imagePath =  Path.Combine("uploads","partners", fileName);
            }
            var partner = new Partner
                {
                    Id = Guid.NewGuid(),
                    VnName = Model.VnName,
                    EnName = Model.EnName,
                    Order = Model.Order,
                    Image = imagePath!
                };
            await _partnerRepository.Add(partner);
            await ParentModal.HideAsync();
            _toastService.Notify(new(ToastType.Success, $"Tạo mới Partner [{partner.VnName}] thành công."));
        }
    }


  private async Task OnImageClick(){
        await js.InvokeAsync<object>("HTMLElement.prototype.click.call", avatarPickerInput.Element);

    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        Model.Image = e.File;

        var resizedFile = await e.File.RequestImageFileAsync(e.File.ContentType,300,150);
        var buf  = new byte[resizedFile.Size];

        using(var stream = resizedFile.OpenReadStream()){
            await stream.ReadAsync(buf);
        }

        avatarPreview = "data:image/png;base64,"+ Convert.ToBase64String(buf);
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.CompletedTask;

        if (Partner is not null)
        {

            Model = new CreatePartnerModel
                {
                    VnName = Partner.VnName,
                    EnName = Partner.EnName,
                    Order = Partner.Order,
                };
            avatarPreview = Partner.Image is not null ? "\\"+Partner.Image : "/images/blank-image.jpg";

        }
        else
        {
            Model = new();
        }
    }


    class CreatePartnerModel
    {
        [Required(ErrorMessage = "Tên tiếng việt đang để trống")]
        public string VnName { get; set; } = null!;
        [Required(ErrorMessage = "Tên tiếng anh đang để trống")]
        public string EnName { get; set; } = null!;
        [Required(ErrorMessage = "thứ tự đang để trống")]
        public int Order { get; set; }
        public IBrowserFile? Image { get; set; }

    }
}