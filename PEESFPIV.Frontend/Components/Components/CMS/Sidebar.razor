@namespace PEESFPIV.Frontend.Components.Components.CMS
@using PEESFPIV.Frontend.States
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@implements IDisposable
@rendermode InteractiveServer
@inject SidebarState SidebarState

<AuthorizeView>

    <aside id="sidebar-multi-level-sidebar"
    class="fixed top-0 left-0 z-40 w-64 h-screen transition-transform @(isOpen ? "translate-x-0" :"-translate-x-full")"
    aria-label="Sidebar">
        <div class="h-10 flex items-center justify-center bg-gray-200">a</div>
        <div class="h-full px-3 py-4 overflow-y-auto bg-gray-50 ">
            <ul class="space-y-2 font-medium">
                @foreach (var item in MenuItems)
                {
                    <NavLink ActiveClass="bg-gray-100" href="@item.Link" Match="NavLinkMatch.All">
                        <p  class="flex items-center p-2 text-gray-900 rounded-lg hover:bg-gray-100 group">
                            <svg class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 group-hover:text-gray-900"
                            aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 22 21">
                                <path
                                d="M16.975 11H10V4.025a1 1 0 0 0-1.066-.998 8.5 8.5 0 1 0 9.039 9.039.999.999 0 0 0-1-1.066h.002Z" />
                                <path
                                d="M12.5 0c-.157 0-.311.01-.565.027A1 1 0 0 0 11 1.02V10h8.975a1 1 0 0 0 1-.935c.013-.188.028-.374.028-.565A8.51 8.51 0 0 0 12.5 0Z" />
                            </svg>
                            <span class="flex-1 ms-3 text-left rtl:text-right whitespace-nowrap">
                                @item.Name
                            </span>
                            @if (item.Children.Count > 0)
                        {
                            <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none"
                                viewBox="0 0 10 6">
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="m1 1 4 4 4-4" />
                            </svg>
                        }
                    </p>
                    <ul id="dropdown-example" class=" py-2 space-y-2">
                        @foreach (var child in item.Children)
                        {
                            <li>
                                <a href="#"
                                    class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 ">Products</a>
                            </li>
                            <li>
                                <a href="#"
                                    class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 ">Billing</a>
                            </li>
                            <li>
                                <a href="#"
                                    class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 ">Invoice</a>
                            </li>
                        }
                    </ul>
                </NavLink>
            }

        </ul>
    </div>
</aside>
</AuthorizeView>
@code {
    private bool isOpen;
    private List<MenuItem> MenuItems = [
    new MenuItem{ Name = "Dashboard", Link="Cms"},
new MenuItem{ Name = "Home", Link="/Cms/Home"},
new MenuItem{ Name = "About", Link="/Cms/About"},
new MenuItem{ Name = "Activities", Link="/Cms/Activities" , Children = [
new MenuItem{ Name = "Contacts", Link="/Cms/Contacts"},
]},
new MenuItem{ Name = "Contacts", Link="/Cms/Contacts"},
new MenuItem{ Name = "Systems", Link="/CMS/Systems"},
];
    protected override async Task OnInitializedAsync()
    {
        await Task.CompletedTask;
        isOpen = SidebarState.IsOpen;
        SidebarState.OnChange += UpdateState;

    }

    void UpdateState()
    {
        isOpen = SidebarState.IsOpen;
        StateHasChanged();
    }
    public void Dispose()
    {
        SidebarState.OnChange -= UpdateState;

    }

    class MenuItem
    {
        public string Name { get; set; } = null!;

        public List<MenuItem> Children { get; set; } = [];

        public string? Icon { get; set; }
        public string Link { get; set; } = null!;
        public bool IsSelected {get;set;}
    }
}